/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    console.log("My plugin has loaded!");
    const rootNomediaPath = `${this.app.vault.getRoot().path}/.nomedia`;
    const rootNomediaExists = await this.app.vault.adapter.exists(rootNomediaPath);
    if (!rootNomediaExists) {
      this.app.vault.create(rootNomediaPath, "");
      console.log(`Created .nomedia file in ${this.app.vault.getRoot().path}`);
    } else {
      console.log(`.nomedia file already exists in ${this.app.vault.getRoot().path}`);
    }
    this.createListener = async (abstractFile) => {
      if (abstractFile instanceof import_obsidian.TFolder) {
        const folderNomediaPath = `${abstractFile.path}/.nomedia`;
        const folderNomediaExists = await this.app.vault.adapter.exists(folderNomediaPath);
        if (!folderNomediaExists) {
          await this.app.vault.create(folderNomediaPath, "");
          console.log(`Created .nomedia file in ${abstractFile.path}`);
        } else {
          console.log(`.nomedia file already exists in ${abstractFile.path}`);
        }
      }
    };
    this.app.vault.on("create", this.createListener);
  }
  async onunload() {
    this.app.vault.off("create", this.createListener);
    console.log("My plugin has been unloaded!");
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLypcbiAqIFRoaXMgcGx1Z2luIHdhcyBkZXZlbG9wZWQgd2l0aCB0aGUgYXNzaXN0YW5jZSBvZiBDaGF0R1BULCBhIGxhbmd1YWdlIG1vZGVsIGNyZWF0ZWQgYnkgT3BlbkFJLlxuICogaHR0cHM6Ly9vcGVuYWkuY29tL1xuICovXG5pbXBvcnQgeyBQbHVnaW4sIFRGb2xkZXIgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE15UGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0cHJpdmF0ZSBjcmVhdGVMaXN0ZW5lcjogKGFic3RyYWN0RmlsZTogYW55KSA9PiB2b2lkO1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRjb25zb2xlLmxvZygnTXkgcGx1Z2luIGhhcyBsb2FkZWQhJyk7XG5cdFx0Ly8gQ2hlY2sgaWYgYSAubm9tZWRpYSBmaWxlIGFscmVhZHkgZXhpc3RzIGluIHRoZSB2YXVsdCByb290XG5cblx0XHRjb25zdCByb290Tm9tZWRpYVBhdGggPSBgJHt0aGlzLmFwcC52YXVsdC5nZXRSb290KCkucGF0aH0vLm5vbWVkaWFgO1xuXHRcdGNvbnN0IHJvb3ROb21lZGlhRXhpc3RzID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5leGlzdHMocm9vdE5vbWVkaWFQYXRoKTtcblxuXHRcdGlmICghcm9vdE5vbWVkaWFFeGlzdHMpIHtcblx0XHRcdHRoaXMuYXBwLnZhdWx0LmNyZWF0ZShyb290Tm9tZWRpYVBhdGgsICcnKTtcblx0XHRcdGNvbnNvbGUubG9nKGBDcmVhdGVkIC5ub21lZGlhIGZpbGUgaW4gJHt0aGlzLmFwcC52YXVsdC5nZXRSb290KCkucGF0aH1gKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29uc29sZS5sb2coYC5ub21lZGlhIGZpbGUgYWxyZWFkeSBleGlzdHMgaW4gJHt0aGlzLmFwcC52YXVsdC5nZXRSb290KCkucGF0aH1gKTtcblx0XHR9XG5cblx0XHQvLyBDcmVhdGUgLm5vbWVkaWEgZmlsZXMgaW4gbmV3IGZvbGRlcnNcblx0XHR0aGlzLmNyZWF0ZUxpc3RlbmVyID0gYXN5bmMgKGFic3RyYWN0RmlsZSkgPT4ge1xuXHRcdFx0aWYgKGFic3RyYWN0RmlsZSBpbnN0YW5jZW9mIFRGb2xkZXIpIHtcblx0XHRcdFx0Y29uc3QgZm9sZGVyTm9tZWRpYVBhdGggPSBgJHthYnN0cmFjdEZpbGUucGF0aH0vLm5vbWVkaWFgO1xuXHRcdFx0XHRjb25zdCBmb2xkZXJOb21lZGlhRXhpc3RzID0gYXdhaXQgdGhpcy5hcHAudmF1bHQuYWRhcHRlci5leGlzdHMoZm9sZGVyTm9tZWRpYVBhdGgpO1xuXHRcdFx0XHRpZiAoIWZvbGRlck5vbWVkaWFFeGlzdHMpIHtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLmFwcC52YXVsdC5jcmVhdGUoZm9sZGVyTm9tZWRpYVBhdGgsICcnKTtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhgQ3JlYXRlZCAubm9tZWRpYSBmaWxlIGluICR7YWJzdHJhY3RGaWxlLnBhdGh9YCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coYC5ub21lZGlhIGZpbGUgYWxyZWFkeSBleGlzdHMgaW4gJHthYnN0cmFjdEZpbGUucGF0aH1gKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBSZWdpc3RlciB0aGUgY3JlYXRlIGV2ZW50IGxpc3RlbmVyXG5cdFx0dGhpcy5hcHAudmF1bHQub24oJ2NyZWF0ZScsIHRoaXMuY3JlYXRlTGlzdGVuZXIpO1xuXHR9XG5cblx0YXN5bmMgb251bmxvYWQoKSB7XG5cdFx0Ly8gVW5yZWdpc3RlciB0aGUgY3JlYXRlIGV2ZW50IGxpc3RlbmVyIG9uIHBsdWdpbiB1bmxvYWRcblx0XHR0aGlzLmFwcC52YXVsdC5vZmYoJ2NyZWF0ZScsIHRoaXMuY3JlYXRlTGlzdGVuZXIpO1xuXHRcdGNvbnNvbGUubG9nKCdNeSBwbHVnaW4gaGFzIGJlZW4gdW5sb2FkZWQhJyk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFJQSxzQkFBZ0M7QUFFaEMsSUFBcUIsV0FBckIsY0FBc0MsdUJBQU87QUFBQSxFQUc1QyxNQUFNLFNBQVM7QUFDZCxZQUFRLElBQUksdUJBQXVCO0FBR25DLFVBQU0sa0JBQWtCLEdBQUcsS0FBSyxJQUFJLE1BQU0sUUFBUSxFQUFFO0FBQ3BELFVBQU0sb0JBQW9CLE1BQU0sS0FBSyxJQUFJLE1BQU0sUUFBUSxPQUFPLGVBQWU7QUFFN0UsUUFBSSxDQUFDLG1CQUFtQjtBQUN2QixXQUFLLElBQUksTUFBTSxPQUFPLGlCQUFpQixFQUFFO0FBQ3pDLGNBQVEsSUFBSSw0QkFBNEIsS0FBSyxJQUFJLE1BQU0sUUFBUSxFQUFFLE1BQU07QUFBQSxJQUN4RSxPQUFPO0FBQ04sY0FBUSxJQUFJLG1DQUFtQyxLQUFLLElBQUksTUFBTSxRQUFRLEVBQUUsTUFBTTtBQUFBLElBQy9FO0FBR0EsU0FBSyxpQkFBaUIsT0FBTyxpQkFBaUI7QUFDN0MsVUFBSSx3QkFBd0IseUJBQVM7QUFDcEMsY0FBTSxvQkFBb0IsR0FBRyxhQUFhO0FBQzFDLGNBQU0sc0JBQXNCLE1BQU0sS0FBSyxJQUFJLE1BQU0sUUFBUSxPQUFPLGlCQUFpQjtBQUNqRixZQUFJLENBQUMscUJBQXFCO0FBQ3pCLGdCQUFNLEtBQUssSUFBSSxNQUFNLE9BQU8sbUJBQW1CLEVBQUU7QUFDakQsa0JBQVEsSUFBSSw0QkFBNEIsYUFBYSxNQUFNO0FBQUEsUUFDNUQsT0FBTztBQUNOLGtCQUFRLElBQUksbUNBQW1DLGFBQWEsTUFBTTtBQUFBLFFBQ25FO0FBQUEsTUFDRDtBQUFBLElBQ0Q7QUFHQSxTQUFLLElBQUksTUFBTSxHQUFHLFVBQVUsS0FBSyxjQUFjO0FBQUEsRUFDaEQ7QUFBQSxFQUVBLE1BQU0sV0FBVztBQUVoQixTQUFLLElBQUksTUFBTSxJQUFJLFVBQVUsS0FBSyxjQUFjO0FBQ2hELFlBQVEsSUFBSSw4QkFBOEI7QUFBQSxFQUMzQztBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
